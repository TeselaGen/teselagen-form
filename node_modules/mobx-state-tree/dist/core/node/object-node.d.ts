import { INode, IJsonPatch, IReversibleJsonPatch, IType, IDisposer, IMiddleware, IMiddlewareHandler, NodeLifeCycle, IdentifierCache } from "../../internal";
export declare class ObjectNode implements INode {
    nodeId: number;
    readonly type: IType<any, any>;
    readonly storedValue: any;
    subpath: string;
    protected _parent: ObjectNode | null;
    _isRunningAction: boolean;
    identifierCache: IdentifierCache | undefined;
    isProtectionEnabled: boolean;
    identifierAttribute: string | undefined;
    _environment: any;
    protected _autoUnbox: boolean;
    state: NodeLifeCycle;
    middlewares: IMiddleware[] | null;
    private snapshotSubscribers;
    private patchSubscribers;
    private disposers;
    applyPatches: (patches: IJsonPatch[]) => void;
    applySnapshot: (snapshot: any) => void;
    constructor(type: IType<any, any>, parent: ObjectNode | null, subpath: string, environment: any, initialValue: any, storedValue: any, canAttachTreeNode: boolean, finalizeNewInstance?: (node: INode, initialValue: any) => void);
    readonly path: string;
    readonly isRoot: boolean;
    readonly parent: ObjectNode | null;
    readonly root: ObjectNode;
    setParent(newParent: ObjectNode | null, subpath?: string | null): void;
    fireHook(name: string): void;
    readonly value: any;
    readonly snapshot: any;
    isRunningAction(): boolean;
    readonly identifier: string | null;
    readonly isAlive: boolean;
    assertAlive(): void;
    getChildNode(subpath: string): INode;
    getChildren(): ReadonlyArray<INode>;
    getChildType(key: string): IType<any, any>;
    readonly isProtected: boolean;
    assertWritable(): void;
    removeChild(subpath: string): void;
    unbox(childNode: INode): any;
    toString(): string;
    finalizeCreation(): void;
    detach(): void;
    preboot(): void;
    die(): void;
    aboutToDie(): void;
    finalizeDeath(): void;
    onSnapshot(onChange: (snapshot: any) => void): IDisposer;
    emitSnapshot(snapshot: any): void;
    onPatch(handler: (patch: IJsonPatch, reversePatch: IJsonPatch) => void): IDisposer;
    emitPatch(basePatch: IReversibleJsonPatch, source: INode): void;
    addDisposer(disposer: () => void): void;
    removeMiddleware(handler: IMiddlewareHandler): void;
    addMiddleWare(handler: IMiddlewareHandler, includeHooks?: boolean): () => void;
    applyPatchLocally(subpath: string, patch: IJsonPatch): void;
    private _invalidateComputed(prop);
}
